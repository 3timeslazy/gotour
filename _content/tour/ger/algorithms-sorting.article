Sortiervorgänge
Dieser Abschnitt enthält Beispiele für Sortiervorgänge.

* Blasensortierung

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/]][Das Video ansehen]]
- Benötigen Sie finanzielle Unterstützung, nutzen Sie unser [[https://www.ardanlabs.com/scholarship/]][Stipendienformular]]

Das Beispielprogramm implementiert eine Funktion, die eine Blasensortierung
gegen eine Menge von Ganzzahlen durchführt.

- Mehr unter [[https://en.wikipedia.org/wiki/Bubble_sort]]

*Diagramm*

    Bubble Sort ist ein einfacher Sortieralgorithmus, der die Eingabeliste wiederholt Element für Element durchläuft
    Eingabeliste Element für Element durchläuft und dabei das aktuelle Element mit dem
    mit dem darauffolgenden, wobei die Werte bei Bedarf vertauscht werden.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Startreihe
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── Nach der ersten Iteration
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Nach zweiter Iteration / sortiert
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* Einfügen Sortieren

Das Beispielprogramm implementiert eine Funktion, die eine Einfügesortierung
gegen eine Menge von Ganzzahlen durchführt.

- Mehr unter [[https://en.wikipedia.org/wiki/Insertion_sort]]

*Diagramm*

    Die Einfügesortierung durchläuft die gleiche Anzahl von Iterationen wie die Array
    Länge minus eins. Bei einem Array mit 5 Zahlen durchläuft die Sortierung
    4 Mal. Beginnend bei Index 1, wird die Zahl nach links
    nach links und platziert sie an einer sortierten Position.

    ┌────┐┌────┐┌┐┌────┐ ◁── Starting Array
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁─── Verschiebung [1]=30 nach links
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌┐┌────┐ ◁── Nach der ersten Iteration
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁─── Verschiebung [2]=05 nach links
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌┐┌────┐ ◁── Nach der zweiten Iteration
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁─── Verschiebung [3]=25 nach links
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌┐┌────┐ ◁── Nach der dritten Iteration
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁─── Verschiebung [4]=15 nach links
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌┐┌────┐ ◁── Nach der fünften Iteration
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁─── Sortiert
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Heap Sort

Das Beispielprogramm implementiert eine Funktion, die eine Heap-Sortierung
gegen eine Menge von Ganzzahlen durchführt.

- Mehr unter [[https://en.wikipedia.org/wiki/Heapsort]]

*Diagramm*

Heap sort teilt seine Eingabe in ein sortiertes und ein unsortiertes Array. Der
Algorithmus schrumpft iterativ den unsortierten Bereich, indem er das größte
Element extrahiert und in das sortierte Array einfügt. Der Algorithmus läuft
in zwei Phasen.

    Phase I
    Teilen Sie die Liste in zwei Hälften und bearbeiten Sie die vordere Hälfte der Liste, indem Sie
    den größten Wert, den wir finden, an den Anfang der Liste und dann den
    zweitgrößte.

    ┌────┐┌────┐ | ┌────┐┌────┐ ◁── Starting Array
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁─── Check [1]=16 < [4]=73 : Tausche
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐ ◁──Nach der ersten Iteration ┌┐┌────┐
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁─── Prüfung [0]=63 < [3]=71 : Vertauschen
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐ ◁── Nach zweiter Iteration ┌┐┌────┐
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁─── Phase I abgeschlossen
    └────┘└────┘ | └────┘└────┘└────┘

    Phase II
    Nehmen Sie die Liste und fangen Sie an, Nummern aus der Liste heraus und in eine neue sortierte
    Liste. Nehmen Sie die Nummer an der ersten Position und verschieben Sie sie in die
    neuen Liste, die die endgültige Sortierung enthalten wird. Dann verschieben Sie die größte
    Zahl, die wir finden, wieder an den Anfang der Liste.

    ┌────┐┌────┐┌┐┌────┐ | ◁── Starting Array
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌┐┌────┐ | ┌────┐ ◁── Nach der ersten Iteration
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁─── 73 nach außen und 71 nach vorne verschieben
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁──Nach zweiter Iteration │
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁─── 71 nach außen und 63 nach vorne verschieben
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐ ◁── Nach der dritten Iteration
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁─── 63 nach außen und 40 nach vorne verschieben
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐ ◁── Nach der vierten Iteration
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁──── 40 nach außen und 16 nach vorne verschieben
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌┐┌────┐ ◁── Nach der fünften Iteration
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁─── Move 16 out / Sorted
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* Schnellsortierung

Das Beispielprogramm implementiert eine Funktion, die eine schnelle Sortierung
gegen eine Menge von Ganzzahlen durchführt.

- Mehr unter [[https://en.wikipedia.org/wiki/Quicksort]]

*Diagramm*

    Quicksort ist ein Divide-and-Conquer-Algorithmus. Er funktioniert durch Auswahl eines
    Pivot-Element aus dem Array aus und teilt die anderen Elemente
    in zwei Unterfelder, je nachdem, ob sie kleiner oder größer als der Drehpunkt sind
    als das Pivot-Element sind.

    -------------------------------------------------------------------
    Beispiel 1
    ┌────┐┌────┐┌┐┌────┐ ◁── Startarray
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁─── Pivot-Wert 41
    └────┘└────┘└┘└┘└────┘ ◁── Sortierelemente 0 - 4 ┌┘└┐ ◁── Pivot-Wert 41
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Erste Sortierung abgeschlossen
    └────┘└────┘└────┘└────┘└────┘

    Die letzten zwei Elemente sind sortiert, konzentrieren Sie sich auf die ersten drei.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Pivot-Wert 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Sortiert
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Beispiel 2
    ┌────┐┌────┐┌┐┌────┐ ◁── Startarray
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁─── Pivot-Wert 09
    └────┘└────┘└┘└┘└────┘ ◁── Sortierelemente 0 - 4 ┌┘└┐ ◁─── Sortierelemente 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Erste Sortierung abgeschlossen
    └────┘└────┘└────┘└────┘└────┘

    Das erste Element ist sortiert, konzentrieren Sie sich auf die letzten vier.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││││ 34 │ ◁── Pivot-Wert 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Zweite Sortierung abgeschlossen
    └────┘└────┘└────┘└────┘└────┘

     Die ersten beiden Elemente sind sortiert, konzentrieren Sie sich auf die letzten drei.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Pivot-Wert 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Dritte Sortierung abgeschlossen
    └────┘└────┘└────┘└────┘└────┘

    Die ersten drei Elemente sind sortiert, konzentrieren Sie sich auf die letzten beiden.

    ┌────┐┌────┐ ◁── Pivot-Wert 59
    │ 73 ││ 59 │ ◁─── Dritte Sortierung abgeschlossen
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Sortiert
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
