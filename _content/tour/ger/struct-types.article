Strukturtypen
Strukturtypen sind eine Möglichkeit, komplexe Typen zu erstellen, die Datenfelder zusammenfassen.

* Strukturtypen

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Das Video ansehen]]
- Benötigen Sie finanzielle Unterstützung, nutzen Sie unser [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Strukturtypen sind eine Möglichkeit, komplexe Typen zu erstellen, die Datenfelder zusammenfassen.
Sie sind eine gute Möglichkeit, die verschiedenen Aspekte der Daten zu organisieren und gemeinsam zu nutzen
die Ihr Programm verwendet.

Die potenzielle Leistung einer Computerarchitektur wird in erster Linie durch ihre
Wortlänge bestimmt (die Anzahl der Bits, die pro Zugriff verarbeitet werden können) und noch wichtiger: 
durch die Speichergröße bzw. die Anzahl der Wörter, auf die sie zugreifen kann.

** Code-Überprüfung

- *Beispiel* *1:* Deklarieren, Erstellen und Initialisieren von struct-Typen.
- *Beispiel* *2:* Anonyme struct-Typen.
- *Beispiel* *3:* Benannte vs. unbenannte Typen.
- *Beispiel* *4:* Strukturtyp-Zuordnungen

.play struct-types/example1.go
.play struct-types/example2.go
.play struct-types/example3.go
.play struct-types/example4.go

** Struktur und Konstruktionsmechanik

Diese Deklaration stellt einen konkreten benutzerdefinierten Typ als eine Zusammensetzung von
verschiedenen Feldern und Typen dar.

    type example struct {
        flag bool
        zähler int16
        pi float32
    }

Deklarieren Sie eine Variable vom Typ example und initialisieren Sie sie mit dem Wert Null.

    var e1 Beispiel

    fmt.Printf("%+v\n", e1)

Ausgabe:
    
    {flag:false counter:0 pi:0}

Deklarieren Sie eine Variable vom Typ example, die nicht auf den Zustand Null gesetzt ist, indem Sie die Literal
Konstruktionssyntax.

    e2 := Beispiel{
        flag: true,
        counter: 10,
        pi: 3.141592,
    }

    fmt.Println("flag", e2.flag)
    fmt.Println("counter", e2.counter)
    fmt.Println("Pi", e2.pi)

Ausgabe:

    flag wahr
    counter 10
    Pi 3.141592

Deklarieren Sie eine Variable eines unbenannten Literal-Typs, die auf ihren Nicht-Null-Wert-Zustand
unter Verwendung der Syntax für die Literalkonstruktion.

    e3 := Struktur {
        flag bool
        zähler int16
        pi float32
    }{
        flag: true,
        counter: 10,
        pi: 3.141592,
    }

    fmt.Println("flag", e3.flag)
    fmt.Println("counter", e3.counter)
    fmt.Println("Pi", e3.pi)

Ausgabe:

    flag wahr
    counter 10
    Pi 3.141592

Die Idee der buchstäblichen Konstruktion ist genau das: etwas buchstäblich zu konstruieren
ohne einen Namen.

Sie sollten var für Nullwerte und den kurzen Variablen-Deklarationsoperator mit
der { }-Syntax für die Konstruktion von Nicht-Nullwerten verwenden.

** Auffüllen und Ausrichten

Wie viel Speicher wird für einen Wert des Typs example zugewiesen?

    type example struct {
        flag bool
        zähler int16
        pi float32
    }

Ein bool ist 1 Byte, int16 ist 2 Byte und float32 ist 4 Byte. Wenn man das alles zusammenzählt
erhalten wir 7 Bytes. Die tatsächliche Antwort lautet jedoch 8 Byte. Warum? Weil es
zwischen dem Flag- und dem Zählerfeld ein Auffüllungsbyte befindet, um die Ausrichtung zu gewährleisten.

.image /tour/eng/static/img/f1.png

Die Idee der Ausrichtung besteht darin, der Hardware zu ermöglichen, den Speicher effizienter zu lesen
indem Speicher an bestimmten Ausrichtungsgrenzen platziert wird. Der Compiler kümmert sich um die Mechanik der Ausrichtungsgrenzen, damit Sie sich nicht darum kümmern müssen.

Abhängig von der Größe eines bestimmten Feldes und seiner Platzierung in der Struktur, legt Go
das benötigte Padding fest.

    Typ example2 struct {
        flag bool
        Zähler int16
        flag2 bool
        pi float32
    }

In diesem Beispiel habe ich ein neues Feld namens "flag2" zwischen den Feldern "Counter" und "Pi
Feldern. Dies führt zu mehr Padding innerhalb der Struktur.

    type example2 struct {
        flag bool // 0xc000100020 <- Startadresse
                byte // 0xc000100021 <- 1 Byte Auffüllung
        counter int16 // 0xc000100022 <- 2 Byte Ausrichtung
        flag2 bool // 0xc000100024 <- 1 Byte Ausrichtung
                byte // 0xc000100025 <- 1 Byte Auffüllung
                Byte // 0xc000100026 <- 1 Byte Auffüllung
                byte // 0xc000100027 <- 1 Byte Auffüllung
        pi float32 // 0xc000100028 <- 4 Byte Ausrichtung
    }

So sehen die Ausrichtung und das Auffüllen aus, wenn ein Wert vom Typ example2 an folgender Stelle beginnt
an der Adresse 0xc000100020 beginnt. Das Flag-Feld stellt die Startadresse dar und ist
nur 1 Byte groß. Da das Zählerfeld 2 Byte an Zuweisung benötigt, muss es
muss es mit einer 2-Byte-Ausrichtung im Speicher platziert werden, d. h. es muss auf eine Adresse fallen
Adresse fallen, die ein Vielfaches von 2 ist. Dies erfordert, dass das Zählerfeld an der Adresse
0xc000100022 beginnen. Dadurch entsteht eine 1-Byte-Lücke zwischen dem Flag- und dem Zählerfeld.

.image /tour/eng/static/img/f2.png

Das Feld `flag2` ist ein bool und kann auf die nächste Adresse 0xc000100024 fallen. Das
letzte Feld ist pi und erfordert 4 Byte Zuweisung, so dass es auf eine
4-Byte-Ausrichtung fallen. Die nächste Adresse für einen 4-Byte-Wert liegt bei 0xc000100028. Das
bedeutet, dass 3 weitere Auffüllungsbytes benötigt werden, um eine korrekte Ausrichtung zu gewährleisten. Dies führt dazu
dass ein Wert des Typs example2 insgesamt 12 Byte Speicherplatz benötigt.

Das größte Feld in einer Struktur stellt die Ausrichtungsgrenze für die gesamte
Struktur dar. In diesem Fall ist das größte Feld 4 Byte groß, so dass die Startadresse für diesen Strukturwert ein Vielfaches von 4 sein muss.
Sie sehen, dass die Adresse 0xc000100020 ein Vielfaches von 4 ist.

Wenn Sie die Anzahl der Auffüllungsbytes minimieren wollen, müssen Sie die Felder von der
höchsten Zuweisung zur niedrigsten Zuweisung anordnen. Dadurch werden alle notwendigen Auffüllungsbytes
an den unteren Rand der Struktur geschoben und verringern die Gesamtzahl der erforderlichen Auffüllungsbytes.

    type example struct {
        pi float32 // 0xc000100020 <- Startadresse
        counter int16 // 0xc000100024 <- 2 Byte Ausrichtung
        flag bool // 0xc000100026 <- 1 Byte Ausrichtung
        flag2 bool // 0xc000100027 <- 1 Byte Ausrichtung
    }

Nach der Neuanordnung der Felder benötigt der struct-Wert nur noch 8 Byte
Zuweisung und nicht 12 Bytes. Da alle Felder es ermöglichen, dass der struct-Wert
auf eine 4-Byte-Ausrichtung fallen, sind keine zusätzlichen Auffüllungsbytes erforderlich.

.image /tour/eng/static/img/f3.png

** Werte zuweisen

Wenn Sie zwei verschiedene benannte Typen haben, die in ihrer Struktur identisch sind, können Sie nicht
einen Wert des Einen dem Anderen zuweisen.

Wenn zum Beispiel die Typen example1 und example2 mit der exakt gleichen
Deklaration deklariert werden und wir zwei Variablen initialisieren.

    var ex1 Beispiel1
    var ex2 beispiel2

Sie können diese beiden Variablen nicht einander zuordnen, da sie von unterschiedlichem
Typen sind. Die Tatsache, dass sie in ihrer Struktur identisch sind, ist irrelevant.

    ex1 = ex2 // Nicht zulässig, Compilerfehler

Um diese Zuordnung vorzunehmen, müssten Sie eine Konvertierungssyntax verwenden, und da sie
von der Struktur her identisch sind, wird der Compiler dies zulassen.

    ex1 = example1(ex2) // Erlaubt, KEIN Compilerfehler

Wenn jedoch ex2 als unbenannter Typ deklariert würde, der genau dieselbe Deklaration wie ex1
hätte, wäre keine Konvertierungssyntax erforderlich.

    var ex2 struct {
        flag bool
        zähler int16
        pi float32
    }

    ex1 = ex2 // Erlaubt, KEINE Notwendigkeit für Konvertierungssyntax

Der Compiler erlaubt diese Zuordnung, ohne dass eine Konvertierung erforderlich ist.

** Anmerkungen

- Wir können die struct-Literalform verwenden, um einen Wert aus einem struct-Typ zu initialisieren.
- Der Punkt (.) Operator ermöglicht den Zugriff auf einzelne Feldwerte.
- Wir können anonyme structs erstellen.

** Zitate

"Die implizite Konvertierung von Typen ist das Halloween-Special der Programmierung. Wer auch immer sich
das ausgedacht hat, verdient seine eigene Hölle." - Martin Thompson

** Extra Lesen

- [[https://www.ardanlabs.com/blog/2013/07/understanding-type-in-go.html][Typologie in Go verstehen]] - William Kennedy
- [[https://www.ardanlabs.com/blog/2013/07/object-oriented-programming-in-go.html][Objektorientiertes Programmieren in Go]] - William Kennedy
- [[https://dave.cheney.net/2015/10/09/padding-is-hard][Auffüllen ist schwer]] - Dave Cheney
- [[https://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/][Ausrichtung von Strukturelementen, Auffüllen und Packen von Daten]]
- [[http://www.catb.org/esr/structure-packing][Die verlorene Kunst des Strukturpackens]] - Eric S. Raymond

* Übungen

Verwenden Sie die Vorlage als Ausgangspunkt, um die Aufgaben zu lösen. Eine mögliche Lösung ist angegeben.

** Übung 1

*Teil* *A:* Deklarieren Sie einen struct-Typ, um Informationen über einen Benutzer zu erhalten (Name,
E-Mail und Alter). Erstellen Sie einen Wert dieses Typs, initialisieren Sie ihn mit Werten und zeigen Sie
jedes Feld.

*Teil* *B:* Deklarieren und initialisieren Sie einen anonymen Strukturtyp mit denselben drei
Feldern. Zeige den Wert an.

.play struct-types/exercise1.go
.play struct-types/answer1.go
