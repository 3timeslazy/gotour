डेटा संरचनाएँ
इस खंड में डेटा संरचना उदाहरण प्रदान करता है।
* हैश मैप

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Watch The Video]]
- वित्तीय सहायता की आवश्यकता है, हमारा उपयोग करें [[https://www.ardanlabs.com/scholarship/][Scholarship Form]]

यह नमूना प्रोग्राम एक मौलिक हैश टेबल का अनुमान लगाता है।

hashKey(key) 0 से len(buckets)-1 के बीच एक संख्या लौटाता है

हम दो या दो से अधिक कुंजियों को उसी बाल्टी में हैश किए जाने वाले मामलों को संभालने के लिए एंट्रीज का स्लाइस का उपयोग करते हैं

अधिक जानकारी के लिए [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]]

*चित्रलेख*

    हैश मैप के साथ, डेटा को बकेट और फिर बकेट के अंदर स्थिति के आधार पर सूचीबद्ध किया जाता है।

    hashKey(key) ──────────────┐
                               │
                               ▽
     ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
     │    │     │     │     │     │     │     │     │  ◁── bucket
     └────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
             │                 │
             ▽                 ▽
       ┌─────────────┐   ┌─────────────┐
       │ key │ value │   │ key │ value │  ◁── प्रवेश
       ├─────────────┤   ├─────────────┤
       │ key │ value │   │ key │ value │
       ├─────────────┤   └─────────────┘
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       └─────────────┘

.play algorithms/data/hash_map.go

* लिंक्ड लिस्ट/जुड़ी सूची

यह नमूना प्रोग्राम एक मौलिक डबल लिंक्ड लिस्ट का अनुमान लगाता है।

- अधिक जानकारी के लिए [[https://en.wikipedia.org/wiki/Linked_list][https://en.wikipedia.org/wiki/Linked_list]] देखें


*चित्रलेख*

    लिंक्ड लिस्ट के साथ, मूल्यों को पॉइंटर्स का उपयोग करके विभिन्न क्रम में बांधा जाता है।

    ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐
    │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │
    └─────┘     └─────┘     └─────┘     └─────┘     └─────┘
       △                                               △
       │                                               │
       ────────────────────        ─────────────────────
                          │        │
                          │        │
                       ┌──────────────-─┐
                       │ सबसे पहला│आखिरी │
                       └──────────────-─┘

.play algorithms/data/list.go

* कतार

यह नमूना प्रोग्राम एक मौलिक वृत्ताकार कतार का अनुमान लगाता है।

- अधिक जानकारी के लिए [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)][https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]] देखें

*चित्रलेख*

    कतार के साथ, पहला मूल्य जो आता है, वही पहला मूल्य बाहर निकलता है।

               ┌──────────────────────────────────────────┐
    ┌─────┐    │ ┌─────┐    ┌─────┐    ┌─────┐    ┌─────┐ │    ┌─────┐
    │ V06 │ ─▷ │ │ V05 │ ─▷ │ V04 │ ─▷ │ V03 │ ─▷ │ V02 │ │ ─▷ │ V01 │
    └─────┘    | └─────┘    └─────┘    └─────┘    └─────┘ |    └─────┘
               └──────────────────────────────────────────┘

.play algorithms/data/queue_circular.go

*स्टैक डेटा संरचन/स्टैक 

यह नमूना प्रोग्राम एक मूल स्टैक को लागू करता है।

- और अधिक देखें: https://en.wikipedia.org/wiki/Stack_(abstract_data_type)

*आरेख*

    एक स्टैक के साथ, पहला मान बाहर का अंतिम मान होता है।

           ┌─────┐
           │ V05 │
           └─────┘
              │
              ▽          ┌─────┐
        ┌───────────┐ ─▷ │ V04 │
        │  ┌─────┐  │    └─────┘
        │  │ V03 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V02 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V01 │  │
        │  └─────┘  │
        └───────────┘

.play algorithms/data/stack.go

* बाइनरी ट्री/द्विआधारी वृक्ष

यह नमूना प्रोग्राम एक बुनियादी बाइनरी ट्री लागू करता है।

- [[https://en.wikipedia.org/wiki/Binary_tree][https://en.wikipedia.org/wiki/Binary_tree]] पर और देखें

*आरेख*

    बाइनरी ट्री के साथ, डेटा को बाईं या दाईं ओर अनुक्रमित किया जाता है
     पेड़ का किनारा. प्रत्येक नोड को जोड़ने पर, पेड़ बनता है
     संतुलित.

      0     1     2     3     4     5     6    ◁─ सम्मिलित क्रम
    ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 65 ││ 45 ││ 35 ││ 75 ││ 85 ││ 78 ││ 95 │
    └────┘└────┘└────┘└────┘└────┘└────┘└────┘

                   ┌────┐
                   │ 75 │                      ◁─ अंतिम ट्री
                   └────┘
                 /        \
           ┌────┐          ┌────┐
           │ 45 │          │ 85 │
           └────┘          └────┘
           /    \          /    \
       ┌────┐  ┌────┐  ┌────┐  ┌────┐
       │ 35 │  │ 65 │  │ 78 │  │ 95 │
       └────┘  └────┘  └────┘  └────┘

.play algorithms/data/tree_binary.go
