Operaciones de Ordenamiento
Esta sección proporciona ejemplos de operaciones de ordenamiento.

* Ordenamiento de Burbuja (Bubble Sort)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Ver el video]]
- Si necesita asistencia financiera, utilice nuestro [[https://www.ardanlabs.com/scholarship/][Formulario de becas]]

El programa de muestra implementa una función que realiza el ordenamiento 
burbuja en un conjunto de enteros

- Más información en [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Diagrama*

    El ordenamiento burbuja es un algoritmo de ordenamiento simple 
    que recorre repetidamente la lista de entrada elemento por elemento, 
    comparando el elemento actual con el siguiente y cambiando sus valores 
    si es necesario.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Array Inicial
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── Después de la Primera Iteración
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Después de la Segunda Iteración / Ordenado
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* Ordenamiento Por Insercion (Insertion Sort)

El programa de muestra implementa una función que realiza el ordenamiento por 
inserción en un conjunto de enteros.

- Más información en [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*Diagrama*

    El ordenamiento por inserción itera el mismo número de veces que la longitud 
    del array menos uno. Para un array de 5 números, la ordenación iterará 4 
    veces. Comenzando en el índice 1, la ordenación mueve ese número hacia la 
    izquierda colocándolo en una posición ordenada.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array Inicial
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Mueve [1]=30 hacia la izquierda
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Después de la Primera Iteración
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Mueve [2]=05 hacia la izquierda
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Después de la Segunda Iteración
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── Mueve [3]=25 hacia la izquierda
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── After Third Iteration
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── Mueve [4]=15 hacia la izquierda
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Después de la Cuarta Iteración
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Ordenado
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Ordenamiento por Montículo (Heap Sort)

El programa de muestra implementa una función que realiza el ordenamiento por 
montículos en un conjunto de enteros.

- Más información en [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*Diagrama*

El ordenamiento por montículos divide su entrada en un array ordenado y 
otro no ordenado. El algoritmo reduce iterativamente la región no ordenada 
extrayendo el elemento más grande de ella e insertándolo en el array ordenado. 
El algoritmo se ejecuta en dos fases.

    Fase I  
    Divide la lista por la mitad y trabaja con la primera mitad de la lista, 
    moviendo el valor más grande que encontramos al principio de la lista y luego 
    el segundo más grande.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Array Inicial
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── Compara [1]=16 < [4]=73 : Intercambia
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Después de la Primera Iteración
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── Compara [0]=63 < [3]=71 : Intercambia
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Después de la Segunda Iteración
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── Fase I Completa
    └────┘└────┘ | └────┘└────┘└────┘

    Fase II  
    Toma la lista y comienza a mover los números hacia afuera y dentro de una 
    nueva lista ordenada. Toma el número en la primera posición y muévelo a la 
    nueva lista que contendrá la clasificación final. Luego, mueve nuevamente 
    el número más grande que encuentres al principio de la lista.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── Array Inicial
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── Después de la Primera Iteración
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── Mueve el 73 hacia fuera y coloca el 71 al frente
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── Después de la Segunda Iteración
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── Mueve el 71 hacia fuera y coloca el 63 al frente
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Después de la Tercera Iteración
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── Mueve 63 hacia fuera y coloca 40 al frente
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── Después de la Cuarta Iteración
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── Mueve 40 hacia fuera y coloca 16 al frente
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Después de la Quinta Iteración
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── Mueve 16 hacia fuera / Ordenado
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* Ordenamiento Rápido (Quick Sort)

El programa de muestra implementa una función que realiza el ordenamiento 
rápido en un conjunto de enteros

- Más información en [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*Diagrama*

    "Quicksort" es un algoritmo de dividir y conquistar. Funciona 
    seleccionando un elemento 'pivote' del arreglo y dividiendo los 
    otros elementos en dos subarreglos, según si son menores o 
    mayores que el pivote. 

    -------------------------------------------------------------------
    Ejemplo 1
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Arreglo Inicial
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── Valor del Pivote 41
    └────┘└────┘└────┘└────┘└────┘ ◁── Ordena los Elementos 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Primer Ordenamiento Completo
    └────┘└────┘└────┘└────┘└────┘

    Los últimos dos elementos están ordenados, enfócate en los primeros tres.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Valor del Pivote 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Ordenado
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Ejemplo 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Arreglo Inicial
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── Valor del Pivote 09
    └────┘└────┘└────┘└────┘└────┘ ◁── Ordena los Elementos 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Primer Ordenamiento Completo
    └────┘└────┘└────┘└────┘└────┘

    Primer elemento ordenado, enfóquese en los últimos cuatro.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── Valor del Pivote 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Segundo Ordenamiento Completo
    └────┘└────┘└────┘└────┘└────┘

    Los dos primeros elementos están ordenados, enfóquese en los últimos tres.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Valor del Pivote 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Tercer Ordenamiento Completo
    └────┘└────┘└────┘└────┘└────┘

    Los tres primeros elementos están ordenados, enfóquese en los últimos dos.

    ┌────┐┌────┐ ◁── Valor del Pivote 59
    │ 73 ││ 59 │ ◁── Tercer Ordenamiento Completo
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Ordenado
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
