Variables
Las variables son el corazón del lenguaje y proporcionan la capacidad de leer y escribir en la memoria.

* Variables

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Ver el video]]
- Si necesita asistencia financiera, utilice nuestro [[https://www.ardanlabs.com/scholarship/][Formulario de becas]]

Las variables son el núcleo del lenguaje y proporcionan la capacidad de leer y escribir en la memoria. 
En Go, el acceso a la memoria es seguro en cuanto a tipos. Esto significa que el compilador toma en serio 
el tipo y no nos permitirá usar variables fuera del alcance de cómo están declaradas.

** Revisión de Código

- *Ejemplo* *1*: Programa de muestra que muestra cómo declarar variables.

.play variables/example1.go

** Tipos Incorporados 
Los tipos proporcionan integridad y legibilidad haciendo dos preguntas:

- ¿Cuánta memoria se debe asignar? (por ejemplo, 1, 2, 4, 8 bytes)
- ¿Qué representa esa memoria? (por ejemplo, int, uint, bool,...)

Los tipos pueden ser específicos para una precisión como int32 o int64:

- uint8 representa un entero sin signo con 1 byte de asignación
- int32 representa un entero con signo con 4 bytes de asignación. 
Cuando declaras un tipo utilizando un tipo no basado en precisión (unit, int), 
el tamaño del valor se basa en la arquitectura que se está utilizando 
para construir el programa:

- 32 bit arq: int representa un entero con signo de 4 bytes de asignación de memoria
- 64 bit arq: int representa un entero con signo de 8 bytes de asignación de memoria

** Tamaño de Palabra

El tamaño de palabra representa la cantidad de asignación de memoria requerida 
para almacenar enteros y punteros para una arquitectura dada. Por ejemplo:

- 32 bit arch: el tamaño de palabra es de 4 bytes de asignación de memoria
- 64 bit arch: el tamaño de palabra es de 8 bytes de asignación de memoria

Esto es importante porque Go tiene estructuras de datos internas (mapas, 
canales, slices, interfaces y funciones) que almacenan enteros y punteros. 
El tamaño de estas estructuras de datos dependerá de la arquitectura que se 
esté utilizando para construir el programa.

En Go, la cantidad de memoria asignada para un valor de tipo int, un puntero 
o una palabra siempre será la misma en la misma arquitectura.

** Concepto de Valor Cero (Zero Value)
Cada valor que construyes en Go se inicializa al menos en su estado de valor 
cero a menos que especifiques el valor de inicialización en la construcción. 
El valor cero es la configuración de cada bit en cada byte a cero.

Esto se hace por integridad de datos y no es gratuito. Lleva tiempo empujar 
electrones a través de la máquina para restablecer esos bits, pero siempre 
debes elegir la integridad sobre el rendimiento.

    Tipo                  Valor Cero (Zero value)
    Boolean (booleano)    false
    Integer (entero)      0
    Float (flotante)      0
    Complex (complejo)    0i
    String (cadena)       "" (empty)
    Pointer (puntero)     nil

** Declarar e Inicializar
La palabra clave var se puede usar para construir valores en su estado de valor cero para todos los tipos.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

Salida:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

Los "strings" usan el conjunto de caracteres UTF8, pero son realmente solo una colección de bytes.

Un string es una estructura de datos interna de dos palabras en Go:

- La primera palabra representa un puntero a una matriz de bytes de respaldo
- La segunda palabra representa la longitud o el número de bytes en la matriz de respaldo
- Si la cadena se establece en su estado de valor cero, entonces la primera palabra es nil 
y la segunda palabra es 0.

Usando el operador de declaración de variable corta, puedes declarar, construir e 
inicializar un valor al mismo tiempo.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

Output:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Conversión vs Casting

Go no tiene casting, sino conversión. En lugar de decirle al compilador que mapee un 
conjunto de bytes a una representación diferente, los bytes deben copiarse a una 
nueva ubicación de memoria para la nueva representación.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

    Salida:
    aaa := int32(10) int32 [10]

Go tiene un paquete en la biblioteca estándar llamado unsafe si necesitas realizar 
una operación de casting real. Realmente deberías evitarlo y ser honesto contigo mismo 
por qué estás considerando usarlo. Realizar una conversión proporciona el más alto 
nivel de integridad para este tipo de operaciones.

** Notas

- El propósito de todos los programas y de todas sus partes es transformar datos de una forma a otra.
- El código principalmente asigna, lee y escribe en memoria.
- Comprender el tipo es crucial para escribir buen código y entender el código.
- Si no comprendes los datos, no comprendes el problema.
- Entiendes mejor el problema al comprender los datos.
- Cuando las variables se están declarando con su valor cero, utiliza la palabra clave var.
- Cuando las variables se están declarando e inicializando, utiliza el operador de declaración de variable corta.

** Lecturas Adicionales

- [[http://golang.org/ref/spec#Boolean_types][Built-In Types]]    
- [[https://golang.org/doc/effective_go.html#variables][Variables]]    
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Gustavo's IEEE-754 Brain Teaser]] - William Kennedy    
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][What's in a name]]    
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][A brief history of “type”]] - Arcane Sentiment    

* Ejercicios

Utiliza la plantilla como punto de partida para completar los ejercicios. Se proporciona una posible solución.

** Ejercicio 1

*Parte* *A:* Declara tres variables que se inicializan en su estado de valor cero y
tres declaradas con un valor literal. Declara variables de tipo string, int y bool.
Muestra los valores de esas variables.

*Parte* *B:* Declara una nueva variable de tipo float32 e inicializa la variable 
convirtiendo el valor literal de Pi (3.14).

.play variables/exercise1.go
.play variables/answer1.go
