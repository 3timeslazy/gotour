Channels(Vituo)
Vituo huruhusu goroutines kuwasiliana na kila mmoja kwa kutumia semantiki za kuashiria.
* Vituo

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Watch The Video]]
- Unahitaji Usaidizi wa Kifedha, Jaza hapa [[https://www.ardanlabs.com/scholarship/][Scholarship Form]]

Ni muhimu kufikiria chaneli si kama muundo wa data, lakini kama fundi wa
kuashiria. Hii inaendana na wazo kwamba unatuma na kupokea kutoka kwa kituo,
si kusoma na kuandika. Ikiwa shida iliyo mbele yako haiwezi kutatuliwa kwa kuashiria,
ikiwa neno kuashiria halitoki kinywani mwako, unahitaji kuhoji matumizi ya
njia.

** Ukaguzi wa Code 

- *Mfano* *1:* Kungojea matokeo
- *Mfano* *2:* Fanya feni
- *Mfano* *3:* Subiri kazi
- *Mfano* *4:* Pooling(Kuunganisha)
- *Mfano* *5:* semaphore ya Nje
- *Mfano* *6:* Ushirikiano wa kazi uliofungwa
- *Mfano* *7:* Acha
- *Mfano* *8:* Cancellation(Kughairi)
- *Mfano* *9:* Jaribu tena muda umeisha
- *Mfano* *10:* Kughairiwa kwa kituo

.play channels/example1.go
.play channels/example2.go
.play channels/example3.go
.play channels/example4.go
.play channels/example5.go
.play channels/example6.go
.play channels/example7.go
.play channels/example8.go
.play channels/example9.go
.play channels/example10.go

** Mitambo ya Channels

Gharama ya kuwa na dhamana katika kiwango cha kuashiria haijulikani latency. The
mtumaji hatajua ni muda gani wanahitaji kusubiri kwa mpokeaji kukubali ishara.
Kusubiri kwa mpokeaji hutengeneza muda wa kuzuia. Katika kesi hii, haijulikani
kiasi cha kuzuia utulivu. Mtumaji anapaswa kusubiri, kwa muda usiojulikana,
mpaka mpokeaji atakapopatikana ili kupokea ishara.

Kusubiri kwa mpokeaji kunamaanisha kiufundi, operesheni ya kupokea hufanyika hapo awali
kutuma. Kwa njia, upokeaji hutokea nanoseconds hapo awali, lakini ni hapo awali.
Hii ina maana kwamba mpokeaji huchukua ishara na kisha anaondoka, akimruhusu mtumaji
ili sasa kuendelea na dhamana.

Je, ikiwa mchakato hauwezi kusubiri muda usiojulikana? Nini kama aina hiyo
latency haitafanya kazi? Kisha dhamana haiwezi kuwa katika kiwango cha kuashiria, inahitaji
kuwa nje yake. Mitambo nyuma ya utendakazi huu ni kwamba kutuma sasa kunafanyika
kabla ya kupokea. Mtumaji anaweza kutekeleza ishara bila kuhitaji mpokeaji
kupatikana. Hivyo mtumaji anapata kutembea na si kusubiri. Hatimaye, unatumaini,
mpokeaji anaonyesha na kuchukua ishara.

Hii inapunguza gharama ya kusubiri wakati wa kutuma, lakini inaleta kutokuwa na uhakika kuhusu mawimbi
kupokelewa na kwa hivyo kujua kama kuna matatizo ya juu ya mkondo na wapokeaji.
Hii inaweza kuunda mchakato wa kukubali kazi ambayo haianzishi wala kumalizika. Ni
hatimaye inaweza kusababisha shinikizo kubwa la mgongo na mifumo kuanguka.

Jambo la pili la kuzingatia ni, unahitaji kutuma data na ishara? Ikiwa ishara
inahitaji uwasilishaji wa data, basi kuashiria ni 1 hadi 1 kati ya Goroutines.
Ikiwa Goroutine mpya inahitaji kupokea ishara pia, ishara ya pili inapaswa kutumwa.

Ikiwa data haihitaji kupitishwa kwa ishara, basi ishara inaweza kuwa 1 kwa
1 au 1 hadi nyingi kati ya Goroutines. Kuashiria bila data kimsingi hutumika kwa
kughairi au kuzima. Inafanywa kwa kufunga kituo.

Jambo la tatu la kuzingatia ni hali ya kituo. Kituo kinaweza kuwa katika jimbo 1 kati ya 3.

Chaneli inaweza kuwa katika hali ya kutokuwepo kwa kuunda chaneli hadi hali yake ya sifuri.
Inatuma na kupokea dhidi ya vituo katika hali hii itazuia. Hii ni nzuri kwa hali
ambapo unataka kutekeleza kusimamishwa kwa kazi kwa muda mfupi.

Chaneli inaweza kuwa katika hali wazi kwa kutumia kitendakazi kilichojengewa ndani. Inatuma na
inayopokea dhidi ya chaneli katika hali hii itafanya kazi chini ya masharti yafuatayo:

*Hazina Buffer* *Channeli:*

- Dhamana katika kiwango cha kuashiria na kupokea kutokea kabla ya kutuma. Inatuma
na kupokea Goroutines haja ya kuja pamoja katika nafasi sawa na wakati kwa ajili ya
ishara ya kushughulikiwa.

*Zina Buffer* *Channeli:*

- Hutoa dhamana nje ya kiwango cha kuashiria na kutuma kutendeka kabla ya
kupokea. Ikiwa bafa haijajaa, kutuma kunaweza kukamilisha vinginevyo watazuia. Ikiwa
buffer si tupu, kupokea inaweza kukamilisha vinginevyo wao kuzuia.

Kituo kinaweza kuwa katika hali ya kufungwa kwa kutumia kipengele cha kukokotoa kilichojengewa ndani. Wewe huna
haja ya kufunga chaneli ili kutoa kumbukumbu, hii ni kwa ajili ya kubadilisha hali. Inatuma
kwenye kituo kilichofungwa kitasababisha hofu, hata hivyo kupokea kwenye kituo kilichofungwa
itarudi mara moja.

Kwa maelezo haya yote, unaweza kuzingatia mifumo ya kituo. Kuzingatia kuashiria
ni muhimu. Wazo ni kwamba, ikiwa unahitaji dhamana katika kiwango cha kuashiria au la,
kulingana na wasiwasi wa muda wa kusubiri. Ikiwa unahitaji kusambaza data na ishara au la, kulingana
juu ya kushughulikia kughairi au la. Unataka kubadilisha sintaksia kuwa semantiki hizi.

** Miongozo ya Kubuni

- Soma Kuhusu [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#channel-design][miongozo ya kubuni]] ya Channels.

** Michoro

*Hakikisho * *la* *Uwasilishaji*

`Dhamana ya Uwasilishaji` inategemea swali moja: â€œJe, ninahitaji hakikisho kwamba
ishara iliyotumwa na goroutine fulani imepokewa?"

.image /tour/eng/static/img/guarantee_of_delivery.png

*Kuashiria* *Na* *Au* *Bila* *Data*

Unapoenda kuashiria `na` data, kuna usanidi wa chaneli tatu
chaguzi unazoweza kuchagua kulingana na aina ya `dhamana` unayohitaji.

.image /tour/eng/static/img/signaling_with_data.png

Kuashiria bila data hutumikia kusudi kuu la kughairi. Inaruhusu moja
goroutine kuashiria goroutine mwingine kughairi wanachofanya na kuendelea.
Ughairi unaweza kutekelezwa kwa kutumia njia `zisizo buffered` na `zilizoakibishwa`.

.image /tour/eng/static/img/signaling_without_data.png

*State(Jimbo)*

Tabia ya channel huathiriwa moja kwa moja na `Jimbo` yake ya sasa. The
hali ya kituo inaweza kuwa `nil`, `wazi` au `imefungwa`.

.image /tour/eng/static/img/state.png

** Usomaji wa Ziada

- [[https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html][The Behavior Of Channels]] - William Kennedy  
- [[https://golang.org/ref/mem#tmp_7][Channel Communication]]    
- [[http://blog.golang.org/share-memory-by-communicating][Share Memory By Communicating]] - Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html][The Nature Of Channels In Go]] - William Kennedy    
- [[http://matt-welsh.blogspot.com/2010/07/retrospective-on-seda.html][A Retrospective on SEDA]] - Matt Welsh    
- [[https://www.youtube.com/watch?v=KBZlN0izeiY][Understanding Channels]] - Kavya Joshi    

** Buffer Bloat - 2011

Kuwa mwangalifu kuhusu kutumia vihifadhi(buffers) vikubwa kwa wazo la kupunguza muda wa kusubiri.

- Large buffers prevent timely notification of back pressure.
- They defeat your ability to reduce back pressure in a timely matter.
- They can increase latency not reduce it.
- Use buffered channels to provide a way of maintaining continuity.
- Don't use them just for performance.
- Use them to handle well defined bursts of data.
- Use them to deal with speed of light issues between handoffs.

*Video*

- [[https://www.youtube.com/watch?v=qbIozKVz73g][Bufferbloat: Dark Buffers in the Internet]]  
- [[http://www.bufferbloat.net/projects/cerowrt/wiki/Bloat-videos][Buffer Bloat Videos]]  

* Exercises

Use the template as a starting point to complete the exercises. A possible solution is provided.

** Exercise 1

Write a program where two goroutines pass an integer back and forth ten times.
Display when each goroutine receives the integer. Increment the integer with each
pass. Once the integer equals ten, terminate the program cleanly.

.play channels/exercise1.go 
.play channels/answer1.go

** Exercise 2

Write a program that uses a fan out pattern to generate 100 random numbers concurrently.
Have each goroutine generate a single random number and return that number to the main
goroutine over a buffered channel. Set the size of the buffer channel so no send ever
blocks. Don't allocate more buffers than you need. Have the main goroutine display each
random number it receives and then terminate the program.

.play channels/exercise2.go 
.play channels/answer2.go

** Exercise 3

Write a program that generates up to 100 random numbers concurrently. Do not send
all 100 values so the number of sends/receives is unknown.

.play channels/exercise3.go 
.play channels/answer3.go
 
** Exercise 4

Write a program that generates up to 100 random numbers concurrently using a worker
pool. Reject even values. Instruct the workers to shutdown with 100 odd numbers have
been collected.

.play channels/exercise4.go 
.play channels/answer4.go
