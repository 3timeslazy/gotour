Tipe Data Struct
Tipe data struct adalah cara mengelompokkan beberapa tipe data ke dalam satu tipe data kompleks.

* Tipe Data Struct

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Tipe data struct adalah cara mengelompokkan beberapa tipe data ke dalam satu tipe data kompleks.
Ini adalah cara yang bagus untuk mengorganisir dan berbagi berbagai aspek data yang dikonsumsi 
oleh program.

Potensi dari kinerja suatu arsitektur komputer ditentukan terutama oleh panjang word 
(jumlah bit yang dapat diproses per akses) dan, yang lebih penting, ukuran memori, 
atau jumlah word yang dapat diaksesnya.

** Tinjauan Kode

- *Contoh* *1:* Mendeklarasikan, membuat, dan menginisialisasi tipe struct.
- *Contoh* *2:* Tipe struct anonim.
- *Contoh* *3:* Tipe bernama dan tidak bernama. 
- *Contoh* *4:* Alignment tipe struct

.play struct-types/example1.go
.play struct-types/example2.go
.play struct-types/example3.go
.play struct-types/example4.go

** Tipe Data Struct dan Mekanisme Penyusunan

Deklarasi ini mewakili tipe yang disusun pengguna sebagai gabungan dari
berbagai atribut dan tipe.

    type example struct {
        flag    bool
        counter int16
        pi      float32
    }

Deklarasikan variabel tipe example dan inisialisasikan dengan keadaan kosong.

    var e1 example

    fmt.Printf("%+v\n", e1)

Keluaran:
    
    {flag:false counter:0 pi:0}

Deklarasikan variabel tipe example yang tidak diatur ke dalam keadaan kosong 
dengan menggunakan sintaks konstruksi literal.

    e2 := example{
        flag:    true,
        counter: 10,
        pi:      3.141592,
    }

    fmt.Println("Flag", e2.flag)
    fmt.Println("Counter", e2.counter)
    fmt.Println("Pi", e2.pi)

Keluaran:

    Flag true
    Counter 10
    Pi 3.141592

Deklarasikan sebuah variabel dengan tipe literal tanpa nama yang diatur ke keadaan non-nolnya 
(non zero value) menggunakan sintaks konstruksi literal.

    e3 := struct {
        flag    bool
        counter int16
        pi      float32
    }{
        flag:    true,
        counter: 10,
        pi:      3.141592,
    }

    fmt.Println("Flag", e3.flag)
    fmt.Println("Counter", e3.counter)
    fmt.Println("Pi", e3.pi)

Keluaran:

    Flag true
    Counter 10
    Pi 3.141592

Konsep dari konstruksi literal hanyalah itu, untuk secara literal mengonstruksi sesuatu
tanpa nama.

Anda harus menggunakan var untuk nilai kosong dan operator deklarasi variabel singkat dengan
sintaks { } untuk konstruksi nilai non-kosong.

** Padding dan Alignment

Berapa banyak memori yang dialokasikan untuk nilai tipe struct example?

    type example struct {
        flag    bool
        counter int16
        pi      float32
    }

Sebuah bool adalah 1 byte, int16 adalah 2 byte, dan float32 adalah 4 byte. Jumlahkan semuanya
dan Anda akan mendapatkan 7 byte. Namun, jawaban sebenarnya adalah 8 byte. Mengapa, karena
ada byte padding yang berada di antara atribut flag dan counter untuk alasan alignment.

.image /tour/ind/static/img/f1.png

Ide dari alignment adalah untuk memungkinkan perangkat membaca memori dengan lebih efisien dengan 
menempatkan memori pada batas alignment tertentu. Kompiler mengurus mekanika batas alignment sehingga Anda tidak perlu melakukannya.

Tergantung pada ukuran atribut tertentu dan penempatannya dalam struktur, Go
menentukan padding yang Anda butuhkan.

    type example2 struct {
        flag    bool
        counter int16
        flag2   bool
        pi      float32
    }

Dalam contoh ini, saya menambahkan atribut baru bernama `flag2` antara counter dan pi. 
Ini menyebabkan padding menjadi lebih banyak di dalam struktur.

    type example2 struct {
        flag    bool     // 0xc000100020 <- Alamat awal
                byte     // 0xc000100021 <- 1 byte padding
        counter int16    // 0xc000100022 <- 2 byte alignment
        flag2   bool     // 0xc000100024 <- 1 byte alignment
                byte     // 0xc000100025 <- 1 byte padding
                byte     // 0xc000100026 <- 1 byte padding
                byte     // 0xc000100027 <- 1 byte padding
        pi      float32  // 0xc000100028 <- 4 byte alignment
    }

Inilah bagaimana alignment dan padding berperan jika nilai tipe example2 dimulai
pada alamat 0xc000100020. Atribut flag mewakili alamat awal dan hanya memiliki ukuran 1 byte. 
Karena atribut counter membutuhkan alokasi 2 byte, ia harus ditempatkan di memori pada alignment 2 byte, 
yang berarti harus jatuh pada alamat yang merupakan kelipatan dari 2. Ini menghasilkan celah 1 byte 
antara atribut flag dan counter.

.image /tour/ind/static/img/f2.png

Atribut `flag2 adalah bool dan dapat dialamatkan pada alamat berikutnya, yaitu 0xc000100024.
Atribut terakhir adalah pi dan memerlukan alokasi 4 byte sehingga harus dialamatkan pada 
alignment 4 byte. Alamat berikutnya untuk nilai 4 byte adalah pada 0xc000100028. Ini berarti 
3 byte padding lebih dibutuhkan untuk mempertahankan alignment yang tepat. Ini menghasilkan nilai 
tipe example2 yang memerlukan alokasi memori total sebanyak 12 byte.

Atribut terbesar dalam struktur mewakili batas alignment untuk seluruh struktur. 
Dalam hal ini, atribut terbesar adalah 4 byte sehingga alamat awal untuk nilai dari tipe struct 
harus merupakan kelipatan dari 4. Anda dapat melihat alamat 0xc000100020 adalah
kelipatan dari 4.

Jika Anda perlu meminimalkan jumlah byte padding, Anda harus mengatur atribut dari
pemberian alokasi tertinggi ke pemberian alokasi terendah. Ini akan mendorong byte padding yang diperlukan
turun ke bagian bawah struktur dan mengurangi jumlah total byte padding yang diperlukan.

    type example struct {
        pi      float32  // 0xc000100020 <- Alamat awal
        counter int16    // 0xc000100024 <- 2 byte alignment
        flag    bool     // 0xc000100026 <- 1 byte alignment
        flag2   bool     // 0xc000100027 <- 1 byte alignment
    }

Setelah pengurutan ulang atribut, isi struktur hanya memerlukan alokasi 8 byte 
dan bukan 12 byte. Karena semua atribut memungkinkan nilai struktur jatuh
pada alignment 4 byte, tidak ada byte padding ekstra yang diperlukan.

.image /tour/ind/static/img/f3.png

** Pengisian nilai

Jika Anda memiliki dua tipe struct bernama yang berbeda yang identik, Anda tidak dapat mengisi
nilai dari salah satu ke yang lain.

Misalnya, jika tipe example1 dan example2 dideklarasikan menggunakan deklarasi yang sama persis
dan menginisialisasi dua variabel.

    var ex1 example1
    var ex2 example2

Anda tidak dapat mengisi dua variabel ini satu sama lain karena mereka adalah tipe struct bernama yang berbeda.
Kenyataan bahwa mereka identik dalam struktur tidak relevan.

    ex1 = ex2  // Tidak diperbolehkan, kompiler error

Untuk melakukan pengisian ini, Anda harus menggunakan sintaks konversi dan karena mereka
identik dalam struktur, kompiler akan mengizinkan operasi ini.

    ex1 = example1(ex2)  // Diperbolehkan, tidak ada kompiler error

Namun, jika ex2 diubah untuk dideklarasikan sebagai tipe struct tanpa nama menggunakan deklarasi yang sama persis
seperti ex1, tidak ada sintaks konversi yang diperlukan.

    var ex2 struct {
        flag    bool
        counter int16
        pi      float32
    }

    ex1 = ex2  // Diperbolehkan, tidak perlu ada konversi

Kompiler akan mengizinkan assignment ini tanpa perlu konversi.

** Catatan

- Bentuk literal struct dapat digunakan untuk menginisialisasi nilai dari tipe struktur.
- Operator titik (.) memungkinkan untuk mengakses nilai dari suatu atribut.
- Kita dapat membuat tipe struct tanpa nama.

** Kutipan

"Implicit conversion of types is the Halloween special of coding. Whoever thought
of them deserves their own special hell." - Martin Thompson

** Bacaan Tambahan

- [[https://www.ardanlabs.com/blog/2013/07/understanding-type-in-go.html][Understanding Type in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/07/object-oriented-programming-in-go.html][Object Oriented Programming in Go]] - William Kennedy    
- [[https://dave.cheney.net/2015/10/09/padding-is-hard][Padding is hard]] - Dave Cheney    
- [[https://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/][Structure Member Alignment, Padding and Data Packing]]    
- [[http://www.catb.org/esr/structure-packing][The Lost Art of Structure Packing]] - Eric S. Raymond     

* Latihan

Gunakan templat sebagai awal untuk menyelesaikan latihan. Solusi telah disediakan.

** Latihan 1

*Bagian* *A:* Deklarasikan tipe struct untuk menyimpan informasi tentang user (nama,
email, dan usia). Buat nilai dari tipe ini, inisialisasi dengan nilai, dan tampilkan
setiap atribut.

*Bagian* *B:* Deklarasikan dan inisialisasi tipe struct tanpa nama dengan tiga atribut yang sama. 
Tampilkan nilai tersebut.


.play struct-types/exercise1.go
.play struct-types/answer1.go
