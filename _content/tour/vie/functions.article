Hàm (Functions)
Hàm là cốt lõi của ngôn ngữ và chúng cung cấp một cơ chế để nhóm và sắp xếp mã của chúng ta để tách ra và phân biệt các phần chức năng.

* Hàm

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Xem Video]]
- Cần hỗ trợ Học phí, hãy sử dụng [[https://www.ardanlabs.com/scholarship/] [Đơn xin Học bổng]] của chúng tôi

Hàm là cốt lõi của ngôn ngữ và chúng cung cấp một cơ chế để nhóm và sắp xếp mã
của chúng ta để tách ra và phân biệt các phần chức năng. Hàm có thể được sử dụng để
cung cấp API cho các gói mà chúng ta viết và là thành phần cốt lõi cho sự đồng thời.

Hàm trong Go đóng vai trò trung tâm trong việc cấu trúc mã và thúc đẩy tính sạch sẽ,
tính có thể bảo trì và tính hiệu quả của phần mềm. Việc hiểu về cách khai báo, định nghĩa và
sử dụng các hàm là mấu chốt để viết các chương trình Go hiệu quả.

** Đánh giá mã (Code Review)

- *Ví dụ* *1:* Trả về nhiều giá trị
- *Ví dụ* *2:* Định danh rỗng
- *Ví dụ* *3:* Tái khai báo
- *Ví dụ* *4:* Hàm ẩn danh/Đóng
- *Ví dụ* *5:* Phục hồi panics (Ngoại lệ)

.chạy functions/example1.go
.chạy functions/example2.go
.chạy functions/example3.go
.chạy functions/example4.go
.chạy functions/example5.go

Hàm là khối kiến trúc nền tảng của chương trình, được sử dụng để đóng gói và
tổ chức mã để có tính mô đun hóa và khả năng sử dụng lại tốt hơn. Hàm là
các khối mã thực hiện một nhiệm vụ cụ thể hoặc một tập hợp các nhiệm vụ liên quan.
Dưới đây là tổng quan về hàm trong Go:

** Khai báo Hàm

Để khai báo một hàm trong Go, bạn sử dụng từ khóa `func` theo sau là từ khóa
tên hàm, danh sách các tham số được đặt trong dấu ngoặc đơn, và một kiểu trả về
(không bắt buộc). Cú pháp chung là:

   func tenHam(thamso1 type, thamso2 type, ...) kieu_tra_ve {
       // thân hàm
   }

Ví dụ:

   func add(x int, y int) int {
       return x + y
   }

** Tham số và giá trị trả về

Hàm có thể nhận 0 hoặc nhiều tham số, là các giá trị được truyền cho hàm khi
được gọi. Mỗi tham số bao gồm một tên và một kiểu. Trong ví dụ ở trên, hàm `add`
nhận hai tham số kiểu số nguyên, `x` và `y`.

Hàm có thể trả về 0 hoặc một giá trị (hoặc không có giá trị nào, trong trường hợp đó
bạn có thể bỏ qua kiểu trả về). Câu lệnh `return` được sử dụng để chỉ định giá trị
được trả về. Trong ví dụ trên, `add` trả về một số nguyên.

Go cho phép các hàm trả về nhiều giá trị. Điều này rất hữu ích trong trường hợp bạn
muốn trả về nhiều kết quả từ một hàm. Ví dụ:

   func divide(x, y float64) (float64, error) {
       if y == 0 {
           return 0, errors.New("division by zero")
       }
       return x / y, nil
   }

Trong ví dụ trên, hàm `divide` trả về cả một kết quả là số thực và một lỗi
(nếu số chia y là 0).

Go cho phép bạn đặt tên cho các giá trị trả về trong chữ ký của hàm
(function's signature). Các giá trị trả về được đặt tên sẽ tự động được
khởi tạo và có thể được sử dụng như các biến thông thường bên trong hàm.
Chúng đặc biệt hữu ích khi xử lý một chức năng phức tạp hoặc xử lý lỗi.
Ví dụ:

   func divide(x, y float64) (result float64, err error) {
       if y == 0 {
           err = errors.New("division by zero - số chia là 0")
           return
       }
       result = x / y
       return
   }

** Gọi hàm

Để gọi một hàm trong Go, bạn sử dụng tên hàm theo sau là danh sách các tham số
được đặt trong dấu ngoặc đơn. Nếu hàm có nhiều giá trị trả về, bạn có thể đặt
chúng vào các biến. Ví dụ:

   sum := add(3, 5)            // Gọi hàm add và gán kết quả của hàm vào biến sum
   result, err := divide(8, 2) // Gọi hàm divide và thu về cả kết quả và lỗi

** Tham số biến thiên của hàm (Function Variadic Parameters)

Go hỗ trợ hàm biến thiên, cho phép bạn truyền những tham số có thể thay đổi
vào một hàm. Để định nghĩa một tham số biến thiên, bạn sử dụng dấu ba chấm
(`...`) theo sau là kiểu tham số. Ví dụ:

   func calculateSum(nums ...int) int {
       sum := 0
       for _, num := range nums {
           sum += num
       }
       return sum
   }

Bạn có thể gọi hàm này với bất kỳ số nguyên nào.

** Hàm ẩn danh (Anonymous Functions)

Go hỗ trợ các hàm ẩn danh, còn được gọi là các hàm đóng. Đây là những hàm
không có tên và chúng có thể được gán cho các biến và được sử dụng làm tham số cho
các hàm khác. Các hàm đóng thường được sử dụng trong Go cho các tác vụ như
định nghĩa các hàm nội tuyến hoặc để lập trình đồng thời bằng cách sử dụng goroutines.

   add := func(x, y int) int {
       return x + y
   }

   result := add(3, 5)

** Hàm như một kiểu dữ liệu

Trong Go, các hàm cũng có thể được sử dụng làm kiểu dữ liệu. Điều này cho phép bạn
xây dựng các hàm lấy các hàm khác làm tham số hoặc trả chúng về dưới dạng kết quả.
Đó là một tính năng mạnh mẽ để thực hiện các hàm bậc cao hơn và các hàm callback.

   type MathFunc func(int, int) int

   func operate(x, y int, op MathFunc) int {
       return op(x, y)
   }

Tiếp theo bạn có thể gán hàm như tham số cho 'operate'

** Defer và Panic

Go cung cấp hai hàm dựng sẵn đặc biệt gọi là `defer` và `panic` để xử lý các
tình huống ngoại lệ và quản lý tài nguyên. `defer` được sử dụng để lên lịch cho 
việc gọi hàm được thực thi ngay trước khi hàm trả về, trong khi `panic` được
sử dụng để kích hoạt lỗi run-time và giải phóng ngăn xếp.

** Ghi chú

- Hàm có thể trả về nhiều giá trị và hầu hết trả về giá trị lỗi.
- Giá trị lỗi phải luôn được kiểm tra như một phần của logic lập trình.
- Định danh rỗng có thể được sử dụng để bỏ qua giá trị trả về.
- Cú pháp: func, receiver, identifier, [parameter(s)], [return(s)], code block.
- Các tham số biến đổi, các đối số biến đổi và mở ra một slice.
- Hàm là một kiểu: bạn có thể sử dụng hàm làm tham số, đối số và kết quả trả về.
- Defer dùng để lên lịch gọi hàm ở hàm khác.
- Panic kích hoạt lỗi run-time và giải phóng ngăn xếp.
- Kết quả trả về được đặt tên khó đọc hơn và không mang tính thành ngữ.

** Đọc thêm

- [[https://golang.org/doc/effective_go.html#functions][Effective Go]] 
- [[https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html][Functions and Naked returns in Go]]  
- [[https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html][Understanding defer panics and recover]]

* Bài tập

Sử dụng bài mẫu làm điểm khởi đầu để hoàn thành các bài tập. Một câu trả lời khả thi đã được cung cấp.

** Bài tập 1

*Phần* *A:* Khai báo một kiểu cấu trúc để lưu thông tin người dùng. Khai báo một
hàm để tạo thông tin và trả về con trỏ kiểu cấu trúc đó và một giá trị lỗi.
Gọi hàm này từ hàm main và hiển thị kết quả.

*Phần* *B:* Gọi hàm của bạn lần thứ hai nhưng lần này bỏ qua kết quả và chỉ kiểm tra lỗi.

.chạy functions/exercise1.go		
.chạy functions/answer1.go
