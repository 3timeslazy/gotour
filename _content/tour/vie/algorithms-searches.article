Thuật toán Tìm kiếm
Phần này cung cấp một số ví dụ về thuật toán Tìm kiếm.

* Tìm kiếm Nhị phân (Binary Search)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Xem Video]]
- Cần hỗ trợ Học phí, hãy sử dụng [[https://www.ardanlabs.com/scholarship/][Đơn xin Học bổng]] của chúng tôi.

Chương trình này sẽ xây dựng một chức năng thực hiện việc lặp đi lặp lại
tìm kiếm nhị phân trong một tập hợp các số nguyên.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Binary_search_algorithm][https://en.wikipedia.org/wiki/Binary_search_algorithm]]

*Sơ đồ*

    Tìm kiếm nhị phân sẽ so sánh giá trị cần tìm với phần tử ở giữa của mảng.
    Nếu chúng không bằng nhau, một nửa mảng không chức giá trị cần tìm sẽ được
    bỏ đị và việc tìm kiếm được tiếp tục với nửa kia, lặp lại việc lấy phần tử
    ở giữa để so sánh với giá trị cần tìm rồi tiếp tục việc này đến khi
    tìm được. Nếu việc tìm kiếm kết thúc với nửa mảng rỗng, ta kết luận
    giá trị cần tìm không nằm trong mảng.


    ┌────┐
    │ 83 │                         ◁── Số cần tìm
    └────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 04 ││ 42 ││ 80 ││ 83 ││ 95 │ ◁── Mảng ban đầu
    └────┘└────┘└────┘└────┘└────┘
                ┌────┐             ◁── Số ở giữa
                │ 80 │             ◁── Số cần tìm thì lớn hơn
                └────┘
                      ┌────┐┌────┐
                      │ 83 ││ 95 │ ◁── Thực hiện tìm kiếm ở nửa sau của mảng
                      └────┘└────┘
                      ┌────┐
                      │ 83 │       ◁── Số ở giữa
                      └────┘
                      ┌────┐
                      │ 83 │       ◁── Đã tìm được số cần tìm / Index là 3
                      └────┘

.chạy algorithms/searches/binary_iterative.go
.chạy algorithms/searches/binary_recursive.go
