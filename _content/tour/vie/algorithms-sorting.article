Thuật toán Sắp xếp
Phần này cung cấp một số ví dụ về thuật toán sắp xếp.

* Sắp xếp Nổi bọt (Bubble Sort)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Xem Video]]
- Cần hỗ trợ Học phí, hãy sử dụng [[https://www.ardanlabs.com/scholarship/][Đơn xin Học bổng]] của chúng tôi.

Chương trình này sẽ xây dựng một chức năng thực hiện việc sắp xếp nổi bọt
cho một tập hợp các số nguyên.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Sơ đồ*

    Sắp xếp nổi bọt là một thuật toán sắp xếp đơn giản, với thao tác duyệt qua
    từng phần tử và so sánh nó với phần tử kế tiếp, đổi chỗ hai phần tử đó nếu cần.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Mảng ban đầu
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── Sau lần duyệt đầu tiên
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Sau lần duyệt thứ hai / Mảng đã được sắp xếp
    └────┘└────┘└────┘└────┘└────┘

.chạy algorithms/sorting/bubble.go

* Sắp xếp Chèn (Insertion Sort)

Chương trình này sẽ xây dựng một chức năng thực hiện việc sắp xếp chèn
cho một tập hợp các số nguyên.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*Sơ đồ*

    Sắp xếp chèn cần được thực hiện n lần với n là độ dài của mảng trừ đi một.
    Với một mảng có 5 số, việc sắp xếp sẽ lặp lại 4 lần. Bắt đầu bằng phần tử ở
    vị trí [1], chương trình sẽ dời số đó qua bên trái, đặt vào vị trí đã được sắp xếp.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Mảng ban đầu
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Dời [1]=30 qua bên trái
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Sau lần duyệt đầu tiên
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Dời [2]=05 qua bên trái
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ hai
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── Dời [3]=25 qua bên trái
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ ba
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── Dời [4]=15 qua bên trái
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ tư
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Mảng đã được sắp xếp
    └────┘└────┘└────┘└────┘└────┘

.chạy algorithms/sorting/insertion.go

* Sắp xếp Vun đống (Heap Sort)

Chương trình này sẽ xây dựng một chức năng thực hiện việc sắp xếp vun đống
cho một tập hợp các số nguyên.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*Sơ đồ*

Sắp xếp vun đống chia đầu vào thành một mảng được sắp xếp và một mảng chưa được sắp xếp.
Thuật toán lặp đi lặp lại để thu hẹp mảng chưa được sắp xếp bằng cách trích xuất phần tử
lớn nhất từ mảng đó và chèn nó vào mảng đã sắp xếp. Thuật toán chạy trong hai giai đoạn.

    Giai đoạn I
    Chia mảng thành hai phần và làm việc trên phần đầu tiên của mảng,
    dời số lớn nhất tìm được lên đầu mảng và sau đó dời số lớn thứ hai.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Mảng ban đầu
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── Kiểm tra [1]=16 < [4]=73 : Đổi chỗ
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Sau lần duyệt đầu tiên
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── Kiểm tra [0]=63 < [3]=71 : Đổi chỗ
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ hai
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── Giai đoạn I hoàn thành
    └────┘└────┘ | └────┘└────┘└────┘

    Giai đoạn II  
    Lấy mảng sau giai đoạn I và bắt đầu di chuyển các số ra và vào
    mảng mới được sắp xếp. Lấy số ở vị trí đầu tiên và dời nó vào
    danh sách mới mà sẽ chứa mảng cuối cùng. Sau đó lần nữa di chuyển
    số lớn nhất tìm được đến đầu danh sách.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── Mảng ban đầu
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── Sau lần duyệt đầu tiên
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── Dời 73 ra ngoài và dời 71 tới trước
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── Sau lần duyệt thứ hai
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── Dời 71 ra ngoài và dời 63 tới trước
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ ba
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── Dời 63 ra ngoài và dời 40 tới trước
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ tư
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── Dời 40 ra ngoài và dời 16 tới trước
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Sau lần duyệt thứ năm
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── Dời 16 ra ngoài / Mảng đã được sắp xếp
     | └────┘└────┘└────┘└────┘└────┘

.chạy algorithms/sorting/heap.go

* Sắp xếp Nhanh (Quick Sort)

Chương trình này sẽ xây dựng một chức năng thực hiện việc sắp xếp nhanh
cho một tập hợp các số nguyên.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*Sơ đồ*

    Sắp xếp nhanh là một thuật toán chia-để-trị. Nó hoạt động bằng cách chọn
    một phần tử 'trục' (pivot) trong mảng và phân vùng các phần tử khác
    thành hai mảng con, tùy theo chúng nhỏ hơn hay lớn hơn hơn pivot. 

    -------------------------------------------------------------------
    Ví dụ 1
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Mảng ban đầu
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── Pivot là 41
    └────┘└────┘└────┘└────┘└────┘ ◁── Sắp xếp phần tử 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Lượt sắp xếp đầu tiên hoàn thành
    └────┘└────┘└────┘└────┘└────┘

    Hai phần tử cuối đã được sắp xếp, tập trung vào ba phần từ đầu.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Pivot là 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Mảng đã được sắp xếp
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Ví dụ 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Mảng ban đầu
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── Pivot là 09
    └────┘└────┘└────┘└────┘└────┘ ◁── Sắp xếp phần tử 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Lượt sắp xếp đầu tiên hoàn thành
    └────┘└────┘└────┘└────┘└────┘

    Phần tử đầu đã được sắp xếp, tập trung vào bốn phần từ cuối.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── Pivot là 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Lượt sắp xếp thứ hai hoàn thành
    └────┘└────┘└────┘└────┘└────┘

     Hai phần tử đầu đã được sắp xếp, tập trung vào ba phần tử cuối.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Pivot là 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Lượt sắp xếp thứ ba hoàn thành
    └────┘└────┘└────┘└────┘└────┘

    Ba phần tử đầu đã được sắp xếp, tập trung vào hai phần tử cuối.

    ┌────┐┌────┐ ◁── Pivot là 59
    │ 73 ││ 59 │ ◁── Lượt sắp xếp thứ tư hoàn thành
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Mảng đã được sắp xếp
    └────┘└────┘└────┘└────┘└────┘

.chạy algorithms/sorting/quick.go
