Cấu trúc Dữ liệu
Phần này cung cấp một số ví dụ về Cấu trúc Dữ liệu.

* Bản đồ băm (Hash Map)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Xem Video]]
- Cần hỗ trợ Học phí, hãy sử dụng [[https://www.ardanlabs.com/scholarship/][Đơn xin Học bổng]] của chúng tôi.

Chương trình này sẽ thực hiện một bảng băm (hash table) cơ bản.

- hashKey(key) (khoá băm) trả về một số từ 0 đến len(buckets)-1

- Chúng ta sử dụng mảng như một thùng chứa (bucket) để giải quyết những trường hợp có từ hai khoá (key)
  được băm trong cùng một thùng chứa.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]]

*Sơ đồ*

    Với một hash map, dữ liệu được tạo mục lục bằng thùng chứa và sau đó được đặt vào
    bên trong thùng chứa.

    hashKey(key) ──────────────┐
                               │
                               ▽
     ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
     │    │     │     │     │     │     │     │     │  ◁── bucket
     └────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
             │                 │
             ▽                 ▽
       ┌─────────────┐   ┌─────────────┐
       │ key │ value │   │ key │ value │  ◁── entry
       ├─────────────┤   ├─────────────┤
       │ key │ value │   │ key │ value │
       ├─────────────┤   └─────────────┘
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       └─────────────┘

.chạy algorithms/data/hash_map.go

* Danh sách liên kết (Linked List)

Chương trình này sẽ thực hiện một danh sách liên kết đôi cơ bản.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Linked_list][https://en.wikipedia.org/wiki/Linked_list]]

*Sơ đồ*

    Với một danh sách liên kết, các giá trị được kết nối theo một thứ tự khác nhau
    thông qua cách sử dụng của những con trỏ.

    ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐
    │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │
    └─────┘     └─────┘     └─────┘     └─────┘     └─────┘
       △                                               △
       │                                               │
       ────────────────────        ─────────────────────
                          │        │
                          │        │
                       ┌───────────────┐
                       │ First │  Last │
                       └───────────────┘

.chạy algorithms/data/list.go

* Hàng đợi (Queue)

Chương trình này sẽ thực hiện một hàng đợi tuần hoàn cơ bản.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)][https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]]

*Sơ đồ*

    Với hàng đợi, giá trị nào đi vào đầu tiên sẽ đi ra trước.

               ┌──────────────────────────────────────────┐
    ┌─────┐    │ ┌─────┐    ┌─────┐    ┌─────┐    ┌─────┐ │    ┌─────┐
    │ V06 │ ─▷ │ │ V05 │ ─▷ │ V04 │ ─▷ │ V03 │ ─▷ │ V02 │ │ ─▷ │ V01 │
    └─────┘    | └─────┘    └─────┘    └─────┘    └─────┘ |    └─────┘
               └──────────────────────────────────────────┘

.chạy algorithms/data/queue_circular.go

* Ngăn xếp (Stack)

Chương trình này sẽ thực hiện một ngăn xếp cơ bản.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Stack_(abstract_data_type)][https://en.wikipedia.org/wiki/Stack_(abstract_data_type)]]

*Sơ đồ*

    Với ngăn xếp, giá trị nào vào đầu tiên sẽ đi ra sau cùng.

           ┌─────┐
           │ V05 │
           └─────┘
              │
              ▽          ┌─────┐
        ┌───────────┐ ─▷ │ V04 │
        │  ┌─────┐  │    └─────┘
        │  │ V03 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V02 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V01 │  │
        │  └─────┘  │
        └───────────┘

.chạy algorithms/data/stack.go

* Cây Nhị phân (Binary Tree)

Chương trình này sẽ thực hiện một cây nhị phân cơ bản.

- Xem thêm tại [[https://en.wikipedia.org/wiki/Binary_tree][https://en.wikipedia.org/wiki/Binary_tree]]

*Sơ đồ*

    Với cây nhị phân, dữ liệu đươc đặt vào bên trái hoặc bên phải của cây.
    Với việc thêm vào mỗi nút, cây được cân bằng.

      0     1     2     3     4     5     6    ◁─ Insert Order
    ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 65 ││ 45 ││ 35 ││ 75 ││ 85 ││ 78 ││ 95 │
    └────┘└────┘└────┘└────┘└────┘└────┘└────┘

                   ┌────┐
                   │ 75 │                      ◁─ Final Tree
                   └────┘
                 /        \
           ┌────┐          ┌────┐
           │ 45 │          │ 85 │
           └────┘          └────┘
           /    \          /    \
       ┌────┐  ┌────┐  ┌────┐  ┌────┐
       │ 35 │  │ 65 │  │ 78 │  │ 95 │
       └────┘  └────┘  └────┘  └────┘

.chạy algorithms/data/tree_binary.go
